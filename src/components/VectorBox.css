:root {
  /* Define base values (what looks good on macOS 2x) */
  --cube-base-size: 25vmin;
  --cube-base-depth: 10vmin;
  --cube-face-depth: 10vmin; /* Should match base-depth */
}

.vector-box-container {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 5;
  /* Use CSS variable for size */
  width: var(--cube-base-size);
  height: var(--cube-base-size);
  opacity: 0; /* Start invisible */

  animation: zoom-in-box 4s ease-out 0s 1 forwards;
  will-change: opacity;
}

.vector-box-scene {
  width: 100%;
  height: 100%;
  /* Perspective might still need tweaking, but let's focus on size first */
  perspective: 80vmin;
  transform-style: preserve-3d;
  will-change: transform;
}

.vector-box-cube {
  width: 100%;
  height: 100%;
  position: relative;
  transform-style: preserve-3d;
  /* Use CSS variable for depth */
  transform: translateZ(calc(var(--cube-base-depth) * -1));
  animation: spin-vector-box 10s linear infinite;
  will-change: transform;
}

.vector-box-face {
  position: absolute;
  width: 80%;
  height: 80%;
  left: 10%;
  top: 10%;
  border: 3px solid #ff00ff;
  box-sizing: border-box;
  background-image: url("/src/assets/logo.jpg");
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
  opacity: 0.7;
  animation: change-vector-color 5s linear infinite alternate;
  will-change: border-color, opacity;
}

/* Use CSS variable for face depth */
.vector-box-face.front {
  transform: rotateY(0deg) translateZ(var(--cube-face-depth));
}
.vector-box-face.back {
  transform: rotateY(180deg) translateZ(var(--cube-face-depth));
}
.vector-box-face.right {
  transform: rotateY(90deg) translateZ(var(--cube-face-depth));
}
.vector-box-face.left {
  transform: rotateY(-90deg) translateZ(var(--cube-face-depth));
}
.vector-box-face.top {
  transform: rotateX(90deg) translateZ(var(--cube-face-depth));
}
.vector-box-face.bottom {
  transform: rotateX(-90deg) translateZ(var(--cube-face-depth));
}

/* --- Keyframes --- */

/* Use CSS variable in keyframes */
@keyframes spin-vector-box {
  0% {
    transform: translateZ(calc(var(--cube-base-depth) * -1)) rotateX(0deg)
      rotateY(0deg) rotateZ(0deg);
  }
  100% {
    transform: translateZ(calc(var(--cube-base-depth) * -1)) rotateX(360deg)
      rotateY(720deg) rotateZ(360deg);
  }
}

/* Keyframes for the zoom-in animation (applied to container) - ONLY OPACITY */
@keyframes zoom-in-box {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

/* New Keyframes for changing border color (applied to faces) */
@keyframes change-vector-color {
  0% {
    border-color: #ff00ff;
  } /* Magenta */
  25% {
    border-color: #00ffff;
  } /* Cyan */
  50% {
    border-color: #ffff00;
  } /* Yellow */
  75% {
    border-color: #00ff00;
  } /* Lime */
  100% {
    border-color: #ff00ff;
  } /* Back to Magenta */
}
